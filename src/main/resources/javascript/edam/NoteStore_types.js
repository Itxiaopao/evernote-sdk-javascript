//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

RelatedNotesFields = {
'RNF_CREATED' : 1,
'RNF_PLACENAME' : 3
};
RelatedNotesRequirement = {
'RNR_MUST' : 1,
'RNR_MUST_NOT' : 2,
'RNR_SHOULD' : 3
};
SyncState = function(args) {
  this.currentTime = null;
  this.fullSyncBefore = null;
  this.updateCount = null;
  this.uploaded = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.fullSyncBefore !== undefined) {
      this.fullSyncBefore = args.fullSyncBefore;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.uploaded !== undefined) {
      this.uploaded = args.uploaded;
    }
  }
};
SyncState.prototype = {};
SyncState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncState.prototype.write = function(output) {
  output.writeStructBegin('SyncState');
  if (this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.fullSyncBefore) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2);
    output.writeI64(this.fullSyncBefore);
    output.writeFieldEnd();
  }
  if (this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.uploaded) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 4);
    output.writeI64(this.uploaded);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunk = function(args) {
  this.currentTime = null;
  this.chunkHighUSN = null;
  this.updateCount = null;
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.searches = null;
  this.resources = null;
  this.expungedNotes = null;
  this.expungedNotebooks = null;
  this.expungedTags = null;
  this.expungedSearches = null;
  this.linkedNotebooks = null;
  this.expungedLinkedNotebooks = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.chunkHighUSN !== undefined) {
      this.chunkHighUSN = args.chunkHighUSN;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.searches !== undefined) {
      this.searches = args.searches;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.expungedNotes !== undefined) {
      this.expungedNotes = args.expungedNotes;
    }
    if (args.expungedNotebooks !== undefined) {
      this.expungedNotebooks = args.expungedNotebooks;
    }
    if (args.expungedTags !== undefined) {
      this.expungedTags = args.expungedTags;
    }
    if (args.expungedSearches !== undefined) {
      this.expungedSearches = args.expungedSearches;
    }
    if (args.linkedNotebooks !== undefined) {
      this.linkedNotebooks = args.linkedNotebooks;
    }
    if (args.expungedLinkedNotebooks !== undefined) {
      this.expungedLinkedNotebooks = args.expungedLinkedNotebooks;
    }
  }
};
SyncChunk.prototype = {};
SyncChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chunkHighUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.notes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Note();
          elem6.read(input);
          this.notes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.notebooks = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new Notebook();
          elem13.read(input);
          this.notebooks.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.tags = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new Tag();
          elem20.read(input);
          this.tags.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.searches = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new SavedSearch();
          elem27.read(input);
          this.searches.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.resources = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new Resource();
          elem34.read(input);
          this.resources.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.expungedNotes = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readString().value;
          this.expungedNotes.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.expungedNotebooks = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString().value;
          this.expungedNotebooks.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.expungedTags = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = input.readString().value;
          this.expungedTags.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.expungedSearches = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString().value;
          this.expungedSearches.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.linkedNotebooks = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new LinkedNotebook();
          elem69.read(input);
          this.linkedNotebooks.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.expungedLinkedNotebooks = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readString().value;
          this.expungedLinkedNotebooks.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunk.prototype.write = function(output) {
  output.writeStructBegin('SyncChunk');
  if (this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.chunkHighUSN) {
    output.writeFieldBegin('chunkHighUSN', Thrift.Type.I32, 2);
    output.writeI32(this.chunkHighUSN);
    output.writeFieldEnd();
  }
  if (this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.notes) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter77 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter77))
      {
        iter77 = this.notes[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter78 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter78))
      {
        iter78 = this.notebooks[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter79 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter79))
      {
        iter79 = this.tags[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searches) {
    output.writeFieldBegin('searches', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.searches.length);
    for (var iter80 in this.searches)
    {
      if (this.searches.hasOwnProperty(iter80))
      {
        iter80 = this.searches[iter80];
        iter80.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter81 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter81))
      {
        iter81 = this.resources[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotes) {
    output.writeFieldBegin('expungedNotes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotes.length);
    for (var iter82 in this.expungedNotes)
    {
      if (this.expungedNotes.hasOwnProperty(iter82))
      {
        iter82 = this.expungedNotes[iter82];
        output.writeString(iter82);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotebooks) {
    output.writeFieldBegin('expungedNotebooks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotebooks.length);
    for (var iter83 in this.expungedNotebooks)
    {
      if (this.expungedNotebooks.hasOwnProperty(iter83))
      {
        iter83 = this.expungedNotebooks[iter83];
        output.writeString(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedTags) {
    output.writeFieldBegin('expungedTags', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.expungedTags.length);
    for (var iter84 in this.expungedTags)
    {
      if (this.expungedTags.hasOwnProperty(iter84))
      {
        iter84 = this.expungedTags[iter84];
        output.writeString(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedSearches) {
    output.writeFieldBegin('expungedSearches', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.expungedSearches.length);
    for (var iter85 in this.expungedSearches)
    {
      if (this.expungedSearches.hasOwnProperty(iter85))
      {
        iter85 = this.expungedSearches[iter85];
        output.writeString(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkedNotebooks) {
    output.writeFieldBegin('linkedNotebooks', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkedNotebooks.length);
    for (var iter86 in this.linkedNotebooks)
    {
      if (this.linkedNotebooks.hasOwnProperty(iter86))
      {
        iter86 = this.linkedNotebooks[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedLinkedNotebooks) {
    output.writeFieldBegin('expungedLinkedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.expungedLinkedNotebooks.length);
    for (var iter87 in this.expungedLinkedNotebooks)
    {
      if (this.expungedLinkedNotebooks.hasOwnProperty(iter87))
      {
        iter87 = this.expungedLinkedNotebooks[iter87];
        output.writeString(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunkFilter = function(args) {
  this.includeNotes = null;
  this.includeNoteResources = null;
  this.includeNoteAttributes = null;
  this.includeNotebooks = null;
  this.includeTags = null;
  this.includeSearches = null;
  this.includeResources = null;
  this.includeLinkedNotebooks = null;
  this.includeExpunged = null;
  this.includeNoteApplicationDataFullMap = null;
  this.includeResourceApplicationDataFullMap = null;
  this.includeNoteResourceApplicationDataFullMap = null;
  this.requireNoteContentClass = null;
  if (args) {
    if (args.includeNotes !== undefined) {
      this.includeNotes = args.includeNotes;
    }
    if (args.includeNoteResources !== undefined) {
      this.includeNoteResources = args.includeNoteResources;
    }
    if (args.includeNoteAttributes !== undefined) {
      this.includeNoteAttributes = args.includeNoteAttributes;
    }
    if (args.includeNotebooks !== undefined) {
      this.includeNotebooks = args.includeNotebooks;
    }
    if (args.includeTags !== undefined) {
      this.includeTags = args.includeTags;
    }
    if (args.includeSearches !== undefined) {
      this.includeSearches = args.includeSearches;
    }
    if (args.includeResources !== undefined) {
      this.includeResources = args.includeResources;
    }
    if (args.includeLinkedNotebooks !== undefined) {
      this.includeLinkedNotebooks = args.includeLinkedNotebooks;
    }
    if (args.includeExpunged !== undefined) {
      this.includeExpunged = args.includeExpunged;
    }
    if (args.includeNoteApplicationDataFullMap !== undefined) {
      this.includeNoteApplicationDataFullMap = args.includeNoteApplicationDataFullMap;
    }
    if (args.includeResourceApplicationDataFullMap !== undefined) {
      this.includeResourceApplicationDataFullMap = args.includeResourceApplicationDataFullMap;
    }
    if (args.includeNoteResourceApplicationDataFullMap !== undefined) {
      this.includeNoteResourceApplicationDataFullMap = args.includeNoteResourceApplicationDataFullMap;
    }
    if (args.requireNoteContentClass !== undefined) {
      this.requireNoteContentClass = args.requireNoteContentClass;
    }
  }
};
SyncChunkFilter.prototype = {};
SyncChunkFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTags = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSearches = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLinkedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeExpunged = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.requireNoteContentClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunkFilter.prototype.write = function(output) {
  output.writeStructBegin('SyncChunkFilter');
  if (this.includeNotes) {
    output.writeFieldBegin('includeNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteResources) {
    output.writeFieldBegin('includeNoteResources', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeNoteResources);
    output.writeFieldEnd();
  }
  if (this.includeNoteAttributes) {
    output.writeFieldBegin('includeNoteAttributes', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeNoteAttributes);
    output.writeFieldEnd();
  }
  if (this.includeNotebooks) {
    output.writeFieldBegin('includeNotebooks', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeTags) {
    output.writeFieldBegin('includeTags', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeTags);
    output.writeFieldEnd();
  }
  if (this.includeSearches) {
    output.writeFieldBegin('includeSearches', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeSearches);
    output.writeFieldEnd();
  }
  if (this.includeResources) {
    output.writeFieldBegin('includeResources', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResources);
    output.writeFieldEnd();
  }
  if (this.includeLinkedNotebooks) {
    output.writeFieldBegin('includeLinkedNotebooks', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeLinkedNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeExpunged) {
    output.writeFieldBegin('includeExpunged', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeExpunged);
    output.writeFieldEnd();
  }
  if (this.includeNoteApplicationDataFullMap) {
    output.writeFieldBegin('includeNoteApplicationDataFullMap', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeNoteApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeResourceApplicationDataFullMap) {
    output.writeFieldBegin('includeResourceApplicationDataFullMap', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeNoteResourceApplicationDataFullMap) {
    output.writeFieldBegin('includeNoteResourceApplicationDataFullMap', Thrift.Type.BOOL, 13);
    output.writeBool(this.includeNoteResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.requireNoteContentClass) {
    output.writeFieldBegin('requireNoteContentClass', Thrift.Type.STRING, 11);
    output.writeString(this.requireNoteContentClass);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteFilter = function(args) {
  this.order = null;
  this.ascending = null;
  this.words = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.timeZone = null;
  this.inactive = null;
  if (args) {
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.words !== undefined) {
      this.words = args.words;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.timeZone !== undefined) {
      this.timeZone = args.timeZone;
    }
    if (args.inactive !== undefined) {
      this.inactive = args.inactive;
    }
  }
};
NoteFilter.prototype = {};
NoteFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.words = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.tagGuids = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString().value;
          this.tagGuids.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.inactive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteFilter.prototype.write = function(output) {
  output.writeStructBegin('NoteFilter');
  if (this.order) {
    output.writeFieldBegin('order', Thrift.Type.I32, 1);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 2);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.words) {
    output.writeFieldBegin('words', Thrift.Type.STRING, 3);
    output.writeString(this.words);
    output.writeFieldEnd();
  }
  if (this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 4);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter95 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter95))
      {
        iter95 = this.tagGuids[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZone) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.inactive) {
    output.writeFieldBegin('inactive', Thrift.Type.BOOL, 7);
    output.writeBool(this.inactive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NoteList.prototype = {};
NoteList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.notes = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new Note();
          elem102.read(input);
          this.notes.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size103 = 0;
        var _rtmp3107;
        this.stoppedWords = [];
        var _etype106 = 0;
        _rtmp3107 = input.readListBegin();
        _etype106 = _rtmp3107.etype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          var elem109 = null;
          elem109 = input.readString().value;
          this.stoppedWords.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.searchedWords = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = input.readString().value;
          this.searchedWords.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteList.prototype.write = function(output) {
  output.writeStructBegin('NoteList');
  if (this.startIndex) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter117 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter117))
      {
        iter117 = this.notes[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter118 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter118))
      {
        iter118 = this.stoppedWords[iter118];
        output.writeString(iter118);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter119 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter119))
      {
        iter119 = this.searchedWords[iter119];
        output.writeString(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesExample = function(args) {
  this.guid = null;
  this.maxQueryTerms = null;
  this.minTermFrequency = null;
  this.scoreBoost = null;
  this.requirement = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.maxQueryTerms !== undefined) {
      this.maxQueryTerms = args.maxQueryTerms;
    }
    if (args.minTermFrequency !== undefined) {
      this.minTermFrequency = args.minTermFrequency;
    }
    if (args.scoreBoost !== undefined) {
      this.scoreBoost = args.scoreBoost;
    }
    if (args.requirement !== undefined) {
      this.requirement = args.requirement;
    }
  }
};
RelatedNotesExample.prototype = {};
RelatedNotesExample.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxQueryTerms = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.minTermFrequency = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.scoreBoost = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.requirement = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesExample.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesExample');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.maxQueryTerms) {
    output.writeFieldBegin('maxQueryTerms', Thrift.Type.I32, 2);
    output.writeI32(this.maxQueryTerms);
    output.writeFieldEnd();
  }
  if (this.minTermFrequency) {
    output.writeFieldBegin('minTermFrequency', Thrift.Type.I32, 3);
    output.writeI32(this.minTermFrequency);
    output.writeFieldEnd();
  }
  if (this.scoreBoost) {
    output.writeFieldBegin('scoreBoost', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.scoreBoost);
    output.writeFieldEnd();
  }
  if (this.requirement) {
    output.writeFieldBegin('requirement', Thrift.Type.I32, 5);
    output.writeI32(this.requirement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesExampleText = function(args) {
  this.text = null;
  this.maxQueryTerms = null;
  this.minTermFrequency = null;
  this.scoreBoost = null;
  this.requirement = null;
  if (args) {
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.maxQueryTerms !== undefined) {
      this.maxQueryTerms = args.maxQueryTerms;
    }
    if (args.minTermFrequency !== undefined) {
      this.minTermFrequency = args.minTermFrequency;
    }
    if (args.scoreBoost !== undefined) {
      this.scoreBoost = args.scoreBoost;
    }
    if (args.requirement !== undefined) {
      this.requirement = args.requirement;
    }
  }
};
RelatedNotesExampleText.prototype = {};
RelatedNotesExampleText.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxQueryTerms = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.minTermFrequency = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.scoreBoost = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.requirement = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesExampleText.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesExampleText');
  if (this.text) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.maxQueryTerms) {
    output.writeFieldBegin('maxQueryTerms', Thrift.Type.I32, 2);
    output.writeI32(this.maxQueryTerms);
    output.writeFieldEnd();
  }
  if (this.minTermFrequency) {
    output.writeFieldBegin('minTermFrequency', Thrift.Type.I32, 3);
    output.writeI32(this.minTermFrequency);
    output.writeFieldEnd();
  }
  if (this.scoreBoost) {
    output.writeFieldBegin('scoreBoost', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.scoreBoost);
    output.writeFieldEnd();
  }
  if (this.requirement) {
    output.writeFieldBegin('requirement', Thrift.Type.I32, 5);
    output.writeI32(this.requirement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesTerms = function(args) {
  this.text = null;
  this.field = null;
  this.scoreBoost = null;
  this.slop = null;
  this.requirement = null;
  if (args) {
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.scoreBoost !== undefined) {
      this.scoreBoost = args.scoreBoost;
    }
    if (args.slop !== undefined) {
      this.slop = args.slop;
    }
    if (args.requirement !== undefined) {
      this.requirement = args.requirement;
    }
  }
};
RelatedNotesTerms.prototype = {};
RelatedNotesTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.field = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.scoreBoost = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.slop = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.requirement = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesTerms.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesTerms');
  if (this.text) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.field) {
    output.writeFieldBegin('field', Thrift.Type.I32, 2);
    output.writeI32(this.field);
    output.writeFieldEnd();
  }
  if (this.scoreBoost) {
    output.writeFieldBegin('scoreBoost', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.scoreBoost);
    output.writeFieldEnd();
  }
  if (this.slop) {
    output.writeFieldBegin('slop', Thrift.Type.I32, 4);
    output.writeI32(this.slop);
    output.writeFieldEnd();
  }
  if (this.requirement) {
    output.writeFieldBegin('requirement', Thrift.Type.I32, 5);
    output.writeI32(this.requirement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesTimestampRange = function(args) {
  this.field = null;
  this.minInclusive = null;
  this.maxInclusive = null;
  this.scoreBoost = null;
  this.requirement = null;
  if (args) {
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.minInclusive !== undefined) {
      this.minInclusive = args.minInclusive;
    }
    if (args.maxInclusive !== undefined) {
      this.maxInclusive = args.maxInclusive;
    }
    if (args.scoreBoost !== undefined) {
      this.scoreBoost = args.scoreBoost;
    }
    if (args.requirement !== undefined) {
      this.requirement = args.requirement;
    }
  }
};
RelatedNotesTimestampRange.prototype = {};
RelatedNotesTimestampRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.field = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.minInclusive = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.maxInclusive = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.scoreBoost = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.requirement = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesTimestampRange.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesTimestampRange');
  if (this.field) {
    output.writeFieldBegin('field', Thrift.Type.I32, 1);
    output.writeI32(this.field);
    output.writeFieldEnd();
  }
  if (this.minInclusive) {
    output.writeFieldBegin('minInclusive', Thrift.Type.I64, 2);
    output.writeI64(this.minInclusive);
    output.writeFieldEnd();
  }
  if (this.maxInclusive) {
    output.writeFieldBegin('maxInclusive', Thrift.Type.I64, 3);
    output.writeI64(this.maxInclusive);
    output.writeFieldEnd();
  }
  if (this.scoreBoost) {
    output.writeFieldBegin('scoreBoost', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.scoreBoost);
    output.writeFieldEnd();
  }
  if (this.requirement) {
    output.writeFieldBegin('requirement', Thrift.Type.I32, 5);
    output.writeI32(this.requirement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesGeographicRange = function(args) {
  this.latitudeCenter = null;
  this.latitudePad = null;
  this.longitudeCenter = null;
  this.longitudePad = null;
  this.scoreBoost = null;
  this.requirement = null;
  if (args) {
    if (args.latitudeCenter !== undefined) {
      this.latitudeCenter = args.latitudeCenter;
    }
    if (args.latitudePad !== undefined) {
      this.latitudePad = args.latitudePad;
    }
    if (args.longitudeCenter !== undefined) {
      this.longitudeCenter = args.longitudeCenter;
    }
    if (args.longitudePad !== undefined) {
      this.longitudePad = args.longitudePad;
    }
    if (args.scoreBoost !== undefined) {
      this.scoreBoost = args.scoreBoost;
    }
    if (args.requirement !== undefined) {
      this.requirement = args.requirement;
    }
  }
};
RelatedNotesGeographicRange.prototype = {};
RelatedNotesGeographicRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitudeCenter = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitudePad = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitudeCenter = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitudePad = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.scoreBoost = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.requirement = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesGeographicRange.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesGeographicRange');
  if (this.latitudeCenter) {
    output.writeFieldBegin('latitudeCenter', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.latitudeCenter);
    output.writeFieldEnd();
  }
  if (this.latitudePad) {
    output.writeFieldBegin('latitudePad', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.latitudePad);
    output.writeFieldEnd();
  }
  if (this.longitudeCenter) {
    output.writeFieldBegin('longitudeCenter', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.longitudeCenter);
    output.writeFieldEnd();
  }
  if (this.longitudePad) {
    output.writeFieldBegin('longitudePad', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitudePad);
    output.writeFieldEnd();
  }
  if (this.scoreBoost) {
    output.writeFieldBegin('scoreBoost', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.scoreBoost);
    output.writeFieldEnd();
  }
  if (this.requirement) {
    output.writeFieldBegin('requirement', Thrift.Type.I32, 6);
    output.writeI32(this.requirement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesQuery = function(args) {
  this.exampleNote = null;
  this.exampleText = null;
  this.geoRange = null;
  this.terms = null;
  this.timestampRanges = null;
  this.timeZone = null;
  if (args) {
    if (args.exampleNote !== undefined) {
      this.exampleNote = args.exampleNote;
    }
    if (args.exampleText !== undefined) {
      this.exampleText = args.exampleText;
    }
    if (args.geoRange !== undefined) {
      this.geoRange = args.geoRange;
    }
    if (args.terms !== undefined) {
      this.terms = args.terms;
    }
    if (args.timestampRanges !== undefined) {
      this.timestampRanges = args.timestampRanges;
    }
    if (args.timeZone !== undefined) {
      this.timeZone = args.timeZone;
    }
  }
};
RelatedNotesQuery.prototype = {};
RelatedNotesQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.exampleNote = new RelatedNotesExample();
        this.exampleNote.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.exampleText = new RelatedNotesExampleText();
        this.exampleText.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.geoRange = new RelatedNotesGeographicRange();
        this.geoRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.terms = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new RelatedNotesTerms();
          elem126.read(input);
          this.terms.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size127 = 0;
        var _rtmp3131;
        this.timestampRanges = [];
        var _etype130 = 0;
        _rtmp3131 = input.readListBegin();
        _etype130 = _rtmp3131.etype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var elem133 = null;
          elem133 = new RelatedNotesTimestampRange();
          elem133.read(input);
          this.timestampRanges.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesQuery.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesQuery');
  if (this.exampleNote) {
    output.writeFieldBegin('exampleNote', Thrift.Type.STRUCT, 1);
    this.exampleNote.write(output);
    output.writeFieldEnd();
  }
  if (this.exampleText) {
    output.writeFieldBegin('exampleText', Thrift.Type.STRUCT, 2);
    this.exampleText.write(output);
    output.writeFieldEnd();
  }
  if (this.geoRange) {
    output.writeFieldBegin('geoRange', Thrift.Type.STRUCT, 3);
    this.geoRange.write(output);
    output.writeFieldEnd();
  }
  if (this.terms) {
    output.writeFieldBegin('terms', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.terms.length);
    for (var iter134 in this.terms)
    {
      if (this.terms.hasOwnProperty(iter134))
      {
        iter134 = this.terms[iter134];
        iter134.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestampRanges) {
    output.writeFieldBegin('timestampRanges', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.timestampRanges.length);
    for (var iter135 in this.timestampRanges)
    {
      if (this.timestampRanges.hasOwnProperty(iter135))
      {
        iter135 = this.timestampRanges[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZone) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesHit = function(args) {
  this.note = null;
  this.explanation = null;
  this.score = null;
  if (args) {
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.explanation !== undefined) {
      this.explanation = args.explanation;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
  }
};
RelatedNotesHit.prototype = {};
RelatedNotesHit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.explanation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesHit.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesHit');
  if (this.note) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.explanation) {
    output.writeFieldBegin('explanation', Thrift.Type.STRING, 2);
    output.writeString(this.explanation);
    output.writeFieldEnd();
  }
  if (this.score) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedNotesResult = function(args) {
  this.hits = null;
  this.totalNotes = null;
  this.searchTime = null;
  this.query = null;
  if (args) {
    if (args.hits !== undefined) {
      this.hits = args.hits;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.searchTime !== undefined) {
      this.searchTime = args.searchTime;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
RelatedNotesResult.prototype = {};
RelatedNotesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.hits = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new RelatedNotesHit();
          elem142.read(input);
          this.hits.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.searchTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedNotesResult.prototype.write = function(output) {
  output.writeStructBegin('RelatedNotesResult');
  if (this.hits) {
    output.writeFieldBegin('hits', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.hits.length);
    for (var iter143 in this.hits)
    {
      if (this.hits.hasOwnProperty(iter143))
      {
        iter143 = this.hits[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalNotes) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.searchTime) {
    output.writeFieldBegin('searchTime', Thrift.Type.I64, 3);
    output.writeI64(this.searchTime);
    output.writeFieldEnd();
  }
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 4);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteMetadata = function(args) {
  this.guid = null;
  this.title = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.attributes = null;
  this.largestResourceMime = null;
  this.largestResourceSize = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.largestResourceMime !== undefined) {
      this.largestResourceMime = args.largestResourceMime;
    }
    if (args.largestResourceSize !== undefined) {
      this.largestResourceSize = args.largestResourceSize;
    }
  }
};
NoteMetadata.prototype = {};
NoteMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.tagGuids = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readString().value;
          this.tagGuids.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.largestResourceMime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.largestResourceSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMetadata.prototype.write = function(output) {
  output.writeStructBegin('NoteMetadata');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.contentLength) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter151 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter151))
      {
        iter151 = this.tagGuids[iter151];
        output.writeString(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.largestResourceMime) {
    output.writeFieldBegin('largestResourceMime', Thrift.Type.STRING, 20);
    output.writeString(this.largestResourceMime);
    output.writeFieldEnd();
  }
  if (this.largestResourceSize) {
    output.writeFieldBegin('largestResourceSize', Thrift.Type.I32, 21);
    output.writeI32(this.largestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NotesMetadataList.prototype = {};
NotesMetadataList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.notes = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new NoteMetadata();
          elem158.read(input);
          this.notes.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size159 = 0;
        var _rtmp3163;
        this.stoppedWords = [];
        var _etype162 = 0;
        _rtmp3163 = input.readListBegin();
        _etype162 = _rtmp3163.etype;
        _size159 = _rtmp3163.size;
        for (var _i164 = 0; _i164 < _size159; ++_i164)
        {
          var elem165 = null;
          elem165 = input.readString().value;
          this.stoppedWords.push(elem165);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size166 = 0;
        var _rtmp3170;
        this.searchedWords = [];
        var _etype169 = 0;
        _rtmp3170 = input.readListBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = input.readString().value;
          this.searchedWords.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataList.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataList');
  if (this.startIndex) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter173 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter173))
      {
        iter173 = this.notes[iter173];
        iter173.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter174 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter174))
      {
        iter174 = this.stoppedWords[iter174];
        output.writeString(iter174);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter175 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter175))
      {
        iter175 = this.searchedWords[iter175];
        output.writeString(iter175);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataResultSpec = function(args) {
  this.includeTitle = null;
  this.includeContentLength = null;
  this.includeCreated = null;
  this.includeUpdated = null;
  this.includeUpdateSequenceNum = null;
  this.includeNotebookGuid = null;
  this.includeTagGuids = null;
  this.includeAttributes = null;
  this.includeLargestResourceMime = null;
  this.includeLargestResourceSize = null;
  if (args) {
    if (args.includeTitle !== undefined) {
      this.includeTitle = args.includeTitle;
    }
    if (args.includeContentLength !== undefined) {
      this.includeContentLength = args.includeContentLength;
    }
    if (args.includeCreated !== undefined) {
      this.includeCreated = args.includeCreated;
    }
    if (args.includeUpdated !== undefined) {
      this.includeUpdated = args.includeUpdated;
    }
    if (args.includeUpdateSequenceNum !== undefined) {
      this.includeUpdateSequenceNum = args.includeUpdateSequenceNum;
    }
    if (args.includeNotebookGuid !== undefined) {
      this.includeNotebookGuid = args.includeNotebookGuid;
    }
    if (args.includeTagGuids !== undefined) {
      this.includeTagGuids = args.includeTagGuids;
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeLargestResourceMime !== undefined) {
      this.includeLargestResourceMime = args.includeLargestResourceMime;
    }
    if (args.includeLargestResourceSize !== undefined) {
      this.includeLargestResourceSize = args.includeLargestResourceSize;
    }
  }
};
NotesMetadataResultSpec.prototype = {};
NotesMetadataResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTitle = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContentLength = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeCreated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdateSequenceNum = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebookGuid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTagGuids = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceMime = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceSize = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataResultSpec.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataResultSpec');
  if (this.includeTitle) {
    output.writeFieldBegin('includeTitle', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeTitle);
    output.writeFieldEnd();
  }
  if (this.includeContentLength) {
    output.writeFieldBegin('includeContentLength', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContentLength);
    output.writeFieldEnd();
  }
  if (this.includeCreated) {
    output.writeFieldBegin('includeCreated', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeCreated);
    output.writeFieldEnd();
  }
  if (this.includeUpdated) {
    output.writeFieldBegin('includeUpdated', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeUpdated);
    output.writeFieldEnd();
  }
  if (this.includeUpdateSequenceNum) {
    output.writeFieldBegin('includeUpdateSequenceNum', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeUpdateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.includeNotebookGuid) {
    output.writeFieldBegin('includeNotebookGuid', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeNotebookGuid);
    output.writeFieldEnd();
  }
  if (this.includeTagGuids) {
    output.writeFieldBegin('includeTagGuids', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeTagGuids);
    output.writeFieldEnd();
  }
  if (this.includeAttributes) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 14);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceMime) {
    output.writeFieldBegin('includeLargestResourceMime', Thrift.Type.BOOL, 20);
    output.writeBool(this.includeLargestResourceMime);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceSize) {
    output.writeFieldBegin('includeLargestResourceSize', Thrift.Type.BOOL, 21);
    output.writeBool(this.includeLargestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteCollectionCounts = function(args) {
  this.notebookCounts = null;
  this.tagCounts = null;
  this.trashCount = null;
  if (args) {
    if (args.notebookCounts !== undefined) {
      this.notebookCounts = args.notebookCounts;
    }
    if (args.tagCounts !== undefined) {
      this.tagCounts = args.tagCounts;
    }
    if (args.trashCount !== undefined) {
      this.trashCount = args.trashCount;
    }
  }
};
NoteCollectionCounts.prototype = {};
NoteCollectionCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size176 = 0;
        var _rtmp3180;
        this.notebookCounts = {};
        var _ktype177 = 0;
        var _vtype178 = 0;
        _rtmp3180 = input.readMapBegin();
        _ktype177 = _rtmp3180.ktype;
        _vtype178 = _rtmp3180.vtype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          if (_i181 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key182 = null;
          var val183 = null;
          key182 = input.readString().value;
          val183 = input.readI32().value;
          this.notebookCounts[key182] = val183;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size184 = 0;
        var _rtmp3188;
        this.tagCounts = {};
        var _ktype185 = 0;
        var _vtype186 = 0;
        _rtmp3188 = input.readMapBegin();
        _ktype185 = _rtmp3188.ktype;
        _vtype186 = _rtmp3188.vtype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          if (_i189 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key190 = null;
          var val191 = null;
          key190 = input.readString().value;
          val191 = input.readI32().value;
          this.tagCounts[key190] = val191;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trashCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteCollectionCounts.prototype.write = function(output) {
  output.writeStructBegin('NoteCollectionCounts');
  if (this.notebookCounts) {
    output.writeFieldBegin('notebookCounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.notebookCounts));
    for (var kiter192 in this.notebookCounts)
    {
      if (this.notebookCounts.hasOwnProperty(kiter192))
      {
        var viter193 = this.notebookCounts[kiter192];
        output.writeString(kiter192);
        output.writeI32(viter193);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tagCounts) {
    output.writeFieldBegin('tagCounts', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tagCounts));
    for (var kiter194 in this.tagCounts)
    {
      if (this.tagCounts.hasOwnProperty(kiter194))
      {
        var viter195 = this.tagCounts[kiter194];
        output.writeString(kiter194);
        output.writeI32(viter195);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.trashCount) {
    output.writeFieldBegin('trashCount', Thrift.Type.I32, 3);
    output.writeI32(this.trashCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdImpressions = function(args) {
  this.adId = null;
  this.impressionCount = null;
  this.impressionTime = null;
  if (args) {
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.impressionCount !== undefined) {
      this.impressionCount = args.impressionCount;
    }
    if (args.impressionTime !== undefined) {
      this.impressionTime = args.impressionTime;
    }
  }
};
AdImpressions.prototype = {};
AdImpressions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.adId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.impressionCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.impressionTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdImpressions.prototype.write = function(output) {
  output.writeStructBegin('AdImpressions');
  if (this.adId) {
    output.writeFieldBegin('adId', Thrift.Type.I32, 1);
    output.writeI32(this.adId);
    output.writeFieldEnd();
  }
  if (this.impressionCount) {
    output.writeFieldBegin('impressionCount', Thrift.Type.I32, 2);
    output.writeI32(this.impressionCount);
    output.writeFieldEnd();
  }
  if (this.impressionTime) {
    output.writeFieldBegin('impressionTime', Thrift.Type.I32, 3);
    output.writeI32(this.impressionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdParameters = function(args) {
  this.clientLanguage = null;
  this.impressions = null;
  this.supportHtml = null;
  this.clientProperties = null;
  if (args) {
    if (args.clientLanguage !== undefined) {
      this.clientLanguage = args.clientLanguage;
    }
    if (args.impressions !== undefined) {
      this.impressions = args.impressions;
    }
    if (args.supportHtml !== undefined) {
      this.supportHtml = args.supportHtml;
    }
    if (args.clientProperties !== undefined) {
      this.clientProperties = args.clientProperties;
    }
  }
};
AdParameters.prototype = {};
AdParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.impressions = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new AdImpressions();
          elem202.read(input);
          this.impressions.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.supportHtml = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size203 = 0;
        var _rtmp3207;
        this.clientProperties = {};
        var _ktype204 = 0;
        var _vtype205 = 0;
        _rtmp3207 = input.readMapBegin();
        _ktype204 = _rtmp3207.ktype;
        _vtype205 = _rtmp3207.vtype;
        _size203 = _rtmp3207.size;
        for (var _i208 = 0; _i208 < _size203; ++_i208)
        {
          if (_i208 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key209 = null;
          var val210 = null;
          key209 = input.readString().value;
          val210 = input.readString().value;
          this.clientProperties[key209] = val210;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdParameters.prototype.write = function(output) {
  output.writeStructBegin('AdParameters');
  if (this.clientLanguage) {
    output.writeFieldBegin('clientLanguage', Thrift.Type.STRING, 2);
    output.writeString(this.clientLanguage);
    output.writeFieldEnd();
  }
  if (this.impressions) {
    output.writeFieldBegin('impressions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.impressions.length);
    for (var iter211 in this.impressions)
    {
      if (this.impressions.hasOwnProperty(iter211))
      {
        iter211 = this.impressions[iter211];
        iter211.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.supportHtml) {
    output.writeFieldBegin('supportHtml', Thrift.Type.BOOL, 5);
    output.writeBool(this.supportHtml);
    output.writeFieldEnd();
  }
  if (this.clientProperties) {
    output.writeFieldBegin('clientProperties', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.clientProperties));
    for (var kiter212 in this.clientProperties)
    {
      if (this.clientProperties.hasOwnProperty(kiter212))
      {
        var viter213 = this.clientProperties[kiter212];
        output.writeString(kiter212);
        output.writeString(viter213);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteEmailParameters = function(args) {
  this.guid = null;
  this.note = null;
  this.toAddresses = null;
  this.ccAddresses = null;
  this.subject = null;
  this.message = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.toAddresses !== undefined) {
      this.toAddresses = args.toAddresses;
    }
    if (args.ccAddresses !== undefined) {
      this.ccAddresses = args.ccAddresses;
    }
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
NoteEmailParameters.prototype = {};
NoteEmailParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.toAddresses = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = input.readString().value;
          this.toAddresses.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size221 = 0;
        var _rtmp3225;
        this.ccAddresses = [];
        var _etype224 = 0;
        _rtmp3225 = input.readListBegin();
        _etype224 = _rtmp3225.etype;
        _size221 = _rtmp3225.size;
        for (var _i226 = 0; _i226 < _size221; ++_i226)
        {
          var elem227 = null;
          elem227 = input.readString().value;
          this.ccAddresses.push(elem227);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteEmailParameters.prototype.write = function(output) {
  output.writeStructBegin('NoteEmailParameters');
  if (this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.note) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.toAddresses) {
    output.writeFieldBegin('toAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.toAddresses.length);
    for (var iter228 in this.toAddresses)
    {
      if (this.toAddresses.hasOwnProperty(iter228))
      {
        iter228 = this.toAddresses[iter228];
        output.writeString(iter228);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddresses) {
    output.writeFieldBegin('ccAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.ccAddresses.length);
    for (var iter229 in this.ccAddresses)
    {
      if (this.ccAddresses.hasOwnProperty(iter229))
      {
        iter229 = this.ccAddresses[iter229];
        output.writeString(iter229);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.subject) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 5);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteVersionId = function(args) {
  this.updateSequenceNum = null;
  this.updated = null;
  this.saved = null;
  this.title = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.saved !== undefined) {
      this.saved = args.saved;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
NoteVersionId.prototype = {};
NoteVersionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.saved = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteVersionId.prototype.write = function(output) {
  output.writeStructBegin('NoteVersionId');
  if (this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 2);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.saved) {
    output.writeFieldBegin('saved', Thrift.Type.I64, 3);
    output.writeI64(this.saved);
    output.writeFieldEnd();
  }
  if (this.title) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

