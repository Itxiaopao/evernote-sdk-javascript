//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

SponsoredGroupRole = {
'GROUP_MEMBER' : 1,
'GROUP_ADMIN' : 2,
'GROUP_OWNER' : 3
};
PublicUserInfo = function(args) {
  this.userId = null;
  this.shardId = null;
  this.privilege = null;
  this.username = null;
  this.noteStoreUrl = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.noteStoreUrl !== undefined) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
  }
};
PublicUserInfo.prototype = {};
PublicUserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserInfo.prototype.write = function(output) {
  output.writeStructBegin('PublicUserInfo');
  if (this.userId) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.shardId) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 2);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.privilege) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 4);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 5);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PremiumInfo = function(args) {
  this.currentTime = null;
  this.premium = null;
  this.premiumRecurring = null;
  this.premiumExpirationDate = null;
  this.premiumExtendable = null;
  this.premiumPending = null;
  this.premiumCancellationPending = null;
  this.canPurchaseUploadAllowance = null;
  this.sponsoredGroupName = null;
  this.sponsoredGroupRole = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.premium !== undefined) {
      this.premium = args.premium;
    }
    if (args.premiumRecurring !== undefined) {
      this.premiumRecurring = args.premiumRecurring;
    }
    if (args.premiumExpirationDate !== undefined) {
      this.premiumExpirationDate = args.premiumExpirationDate;
    }
    if (args.premiumExtendable !== undefined) {
      this.premiumExtendable = args.premiumExtendable;
    }
    if (args.premiumPending !== undefined) {
      this.premiumPending = args.premiumPending;
    }
    if (args.premiumCancellationPending !== undefined) {
      this.premiumCancellationPending = args.premiumCancellationPending;
    }
    if (args.canPurchaseUploadAllowance !== undefined) {
      this.canPurchaseUploadAllowance = args.canPurchaseUploadAllowance;
    }
    if (args.sponsoredGroupName !== undefined) {
      this.sponsoredGroupName = args.sponsoredGroupName;
    }
    if (args.sponsoredGroupRole !== undefined) {
      this.sponsoredGroupRole = args.sponsoredGroupRole;
    }
  }
};
PremiumInfo.prototype = {};
PremiumInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.premium = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumRecurring = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.premiumExpirationDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumExtendable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumPending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumCancellationPending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.canPurchaseUploadAllowance = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sponsoredGroupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.sponsoredGroupRole = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PremiumInfo.prototype.write = function(output) {
  output.writeStructBegin('PremiumInfo');
  if (this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.premium) {
    output.writeFieldBegin('premium', Thrift.Type.BOOL, 2);
    output.writeBool(this.premium);
    output.writeFieldEnd();
  }
  if (this.premiumRecurring) {
    output.writeFieldBegin('premiumRecurring', Thrift.Type.BOOL, 3);
    output.writeBool(this.premiumRecurring);
    output.writeFieldEnd();
  }
  if (this.premiumExpirationDate) {
    output.writeFieldBegin('premiumExpirationDate', Thrift.Type.I64, 4);
    output.writeI64(this.premiumExpirationDate);
    output.writeFieldEnd();
  }
  if (this.premiumExtendable) {
    output.writeFieldBegin('premiumExtendable', Thrift.Type.BOOL, 5);
    output.writeBool(this.premiumExtendable);
    output.writeFieldEnd();
  }
  if (this.premiumPending) {
    output.writeFieldBegin('premiumPending', Thrift.Type.BOOL, 6);
    output.writeBool(this.premiumPending);
    output.writeFieldEnd();
  }
  if (this.premiumCancellationPending) {
    output.writeFieldBegin('premiumCancellationPending', Thrift.Type.BOOL, 7);
    output.writeBool(this.premiumCancellationPending);
    output.writeFieldEnd();
  }
  if (this.canPurchaseUploadAllowance) {
    output.writeFieldBegin('canPurchaseUploadAllowance', Thrift.Type.BOOL, 8);
    output.writeBool(this.canPurchaseUploadAllowance);
    output.writeFieldEnd();
  }
  if (this.sponsoredGroupName) {
    output.writeFieldBegin('sponsoredGroupName', Thrift.Type.STRING, 9);
    output.writeString(this.sponsoredGroupName);
    output.writeFieldEnd();
  }
  if (this.sponsoredGroupRole) {
    output.writeFieldBegin('sponsoredGroupRole', Thrift.Type.I32, 10);
    output.writeI32(this.sponsoredGroupRole);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationResult = function(args) {
  this.currentTime = null;
  this.authenticationToken = null;
  this.expiration = null;
  this.user = null;
  this.publicUserInfo = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.expiration !== undefined) {
      this.expiration = args.expiration;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.publicUserInfo !== undefined) {
      this.publicUserInfo = args.publicUserInfo;
    }
    if (args.noteStoreUrl !== undefined) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
  }
};
AuthenticationResult.prototype = {};
AuthenticationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicUserInfo = new PublicUserInfo();
        this.publicUserInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationResult.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationResult');
  if (this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.expiration) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 3);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 4);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.publicUserInfo) {
    output.writeFieldBegin('publicUserInfo', Thrift.Type.STRUCT, 5);
    this.publicUserInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 6);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 7);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BootstrapProfile = function(args) {
  this.name = null;
  this.preferred = null;
  this.settings = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.preferred !== undefined) {
      this.preferred = args.preferred;
    }
    if (args.settings !== undefined) {
      this.settings = args.settings;
    }
  }
};
BootstrapProfile.prototype = {};
BootstrapProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.preferred = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.settings = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.settings[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BootstrapProfile.prototype.write = function(output) {
  output.writeStructBegin('BootstrapProfile');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.preferred) {
    output.writeFieldBegin('preferred', Thrift.Type.BOOL, 2);
    output.writeBool(this.preferred);
    output.writeFieldEnd();
  }
  if (this.settings) {
    output.writeFieldBegin('settings', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
    for (var kiter8 in this.settings)
    {
      if (this.settings.hasOwnProperty(kiter8))
      {
        var viter9 = this.settings[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BootstrapInfo = function(args) {
  this.profiles = null;
  if (args) {
    if (args.profiles !== undefined) {
      this.profiles = args.profiles;
    }
  }
};
BootstrapInfo.prototype = {};
BootstrapInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.profiles = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new BootstrapProfile();
          elem16.read(input);
          this.profiles.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BootstrapInfo.prototype.write = function(output) {
  output.writeStructBegin('BootstrapInfo');
  if (this.profiles) {
    output.writeFieldBegin('profiles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.profiles.length);
    for (var iter17 in this.profiles)
    {
      if (this.profiles.hasOwnProperty(iter17))
      {
        iter17 = this.profiles[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EDAM_VERSION_MAJOR = 1;
EDAM_VERSION_MINOR = 21;
